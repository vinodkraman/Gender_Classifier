# -*- coding: utf-8 -*-
"""model_conversion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N13QnNBCiaAB-A3FOn8irMoRb44mduc5

# Model Conversion
This notebook builds a Tensorflow version of the pre-trained VGG Face Descriptor Model by loading its extracted weights from a .h5 file. Please update src_path with path to the extracted weights for the VGG Face Descriptor.
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

src_path = "/content/drive/My Drive/weights_full.h5"

model = models.Sequential()
model.add(layers.Conv2D(64, (3, 3), padding= "same", activation='relu', input_shape=(224, 224, 3)))
model.add(layers.Conv2D(64, (3, 3),padding= "same", activation='relu'))
model.add(layers.MaxPooling2D(2, 2))
model.add(layers.Conv2D(128, (3, 3), padding= "same", activation='relu'))
model.add(layers.Conv2D(128, (3, 3), padding= "same", activation='relu'))
model.add(layers.MaxPooling2D(2, 2))
model.add(layers.Conv2D(256, (3, 3), padding= "same", activation='relu'))
model.add(layers.Conv2D(256, (3, 3), padding= "same", activation='relu'))
model.add(layers.Conv2D(256, (3, 3), padding= "same", activation='relu'))
model.add(layers.MaxPooling2D(2, 2))
model.add(layers.Conv2D(512, (3, 3), padding= "same", activation='relu'))
model.add(layers.Conv2D(512, (3, 3), padding= "same", activation='relu'))
model.add(layers.Conv2D(512, (3, 3), padding= "same", activation='relu'))
model.add(layers.MaxPooling2D(2, 2))
model.add(layers.Conv2D(512, (3, 3), padding= "same", activation='relu'))
model.add(layers.Conv2D(512, (3, 3), padding= "same", activation='relu'))
model.add(layers.Conv2D(512, (3, 3), padding= "same", activation='relu'))
model.add(layers.MaxPooling2D(2, 2))
model.add(layers.Flatten())
model.add(layers.Dense(4096, activation= "relu"))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(4096, activation= "relu"))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(2622, activation= "softmax"))
print(model.summary())

#load weights
model.load_weights(src)
weights, biases = model.layers[0].get_weights()
#check that weights have been uploaded
print(weights)
print(model.summary())
